// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Drone {
  id                    String         @id @default(cuid())
  serial                String         @unique
  model                 String
  status                String         // pending, in-progress, completed
  overallCompletion     Float          @default(0)
  startDate             DateTime?
  estimatedCompletion   DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  systems               DroneSystem[]
  buildActivities       BuildActivity[]
  
  @@map("drones")
}

model SystemDefinition {
  id                    String         @id @default(cuid())
  name                  String         @unique
  weight                Float          // percentage weight of total drone
  
  assemblies            AssemblyDefinition[]
  droneSystems          DroneSystem[]
  
  @@map("system_definitions")
}

model AssemblyDefinition {
  id                    String         @id @default(cuid())
  name                  String
  systemId              String
  weight                Float          // percentage weight within system
  
  system                SystemDefinition @relation(fields: [systemId], references: [id], onDelete: Cascade)
  items                 ItemDefinition[]
  droneAssemblies       DroneAssembly[]
  
  @@map("assembly_definitions")
}

model ItemDefinition {
  id                    String         @id @default(cuid())
  name                  String
  assemblyId            String
  weight                Float          // percentage weight within assembly
  
  assembly              AssemblyDefinition @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
  droneItems            DroneItem[]
  
  @@map("item_definitions")
}

model DroneSystem {
  id                    String         @id @default(cuid())
  droneId               String
  systemDefinitionId    String
  completionPercentage  Float          @default(0)
  
  drone                 Drone          @relation(fields: [droneId], references: [id], onDelete: Cascade)
  systemDefinition      SystemDefinition @relation(fields: [systemDefinitionId], references: [id])
  assemblies            DroneAssembly[]
  
  @@unique([droneId, systemDefinitionId])
  @@map("drone_systems")
}

model DroneAssembly {
  id                    String         @id @default(cuid())
  droneSystemId         String
  assemblyDefinitionId  String
  completionPercentage  Float          @default(0)
  
  droneSystem           DroneSystem    @relation(fields: [droneSystemId], references: [id], onDelete: Cascade)
  assemblyDefinition    AssemblyDefinition @relation(fields: [assemblyDefinitionId], references: [id])
  items                 DroneItem[]
  
  @@unique([droneSystemId, assemblyDefinitionId])
  @@map("drone_assemblies")
}

model DroneItem {
  id                    String         @id @default(cuid())
  droneAssemblyId       String
  itemDefinitionId      String
  status                String         @default("pending") // pending, in-progress, completed
  
  droneAssembly         DroneAssembly  @relation(fields: [droneAssemblyId], references: [id], onDelete: Cascade)
  itemDefinition        ItemDefinition @relation(fields: [itemDefinitionId], references: [id])
  
  @@unique([droneAssemblyId, itemDefinitionId])
  @@map("drone_items")
}

model BuildActivity {
  id                    String         @id @default(cuid())
  droneId               String
  itemName              String
  assemblyName          String
  systemName            String
  action                String         // started, completed, updated
  status                String         // pending, in-progress, completed
  timestamp             DateTime       @default(now())
  
  drone                 Drone          @relation(fields: [droneId], references: [id], onDelete: Cascade)
  
  @@map("build_activities")
}
